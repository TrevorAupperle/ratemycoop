import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/router";
import { Fragment, useEffect, useState } from "react";
import RatingBars from "~/components/RatingBars";
import {
  ChevronDownIcon,
  FlagIcon as FlagIconSolid,
} from "@heroicons/react/20/solid";
import { BarsArrowDownIcon, FlagIcon } from "@heroicons/react/24/outline";
import { Menu, Transition } from "@headlessui/react";
import Navbar from "~/components/Navbar";
import Footer from "~/components/Footer";
import { api } from "~/utils/api";
import ambassadorCalulations, {
  type AmbassadorCalulations,
} from "~/utils/ambassadorCalculations";
import SkeletonDiv from "~/components/SkeletonDiv";

const Ambassador = () => {
  const router = useRouter();
  const { id } = router.query;
  const [ambassadorId, setAmbassadorId] = useState<number>(-1);
  const [ambassadorCals, setAmbassadorCals] = useState<AmbassadorCalulations>();

  const ambassador = api.ambassador.getAmbassador.useQuery(
    {
      id: ambassadorId,
    },
    { refetchOnWindowFocus: false },
  );

  useEffect(() => {
    if (typeof id === "string") {
      const parsedId = parseInt(id);
      if (!isNaN(parsedId)) {
        setAmbassadorId(parsedId);
      }
    } else if (Array.isArray(id)) {
      setAmbassadorId(-1);
    } else {
      setAmbassadorId(-1);
    }
  }, [id]);

  useEffect(() => {
    if (ambassador.data) {
      setAmbassadorCals(ambassadorCalulations(ambassador.data.ratings));
    }
  }, [ambassador.data]);

  const [ratingSearchValue, setRatingSearchValue] = useState("");
  const [reportButtonHovered, setReportButtonHovered] = useState(-1);

  const filteredRatings =
    ratingSearchValue === ""
      ? ambassador.data?.ratings
      : ambassador.data?.ratings.filter(
          (rating) =>
            rating.review
              .toLowerCase()
              .includes(ratingSearchValue.toLowerCase()) ||
            rating.MajorRatings.map((majorRating) =>
              majorRating.major.name.toLowerCase(),
            )
              .join(", ")
              .includes(ratingSearchValue.toLowerCase()),
        );

  return (
    <>
      <Head>
        <title>{ambassador.data?.name} | RateMyCoop</title>
        <meta name="description" content="Generated by create-t3-app" />
        <meta name="theme-color" content="#0b2341" />
        <meta name="apple-mobile-web-app-status-bar-style" content="#0b2341" />
        <link rel="icon" href="/AuburnCupola.ico" />
      </Head>
      <div className="flex min-h-screen flex-col gap-8">
        <Navbar />
        <div className="flex grow flex-col items-center px-6">
          <div className="flex w-full max-w-7xl flex-col gap-16 lg:flex-row">
            <div className="flex flex-col gap-4 text-auburnBlue-900 sm:flex-row lg:w-1/2 lg:flex-col ">
              <div className="flex w-2/3 flex-col gap-4">
                <div className="flex flex-col gap-1">
                  <SkeletonDiv
                    loading={ambassador.isLoading}
                    skeletonClassName="h-9 w-full"
                  >
                    <h2 className="text-3xl font-bold">
                      {ambassador.data?.name}
                    </h2>
                  </SkeletonDiv>
                  <SkeletonDiv
                    loading={ambassador.isLoading}
                    skeletonClassName="h-7 w-full"
                  >
                    <h3 className="text-lg text-auburnOrange-900">
                      {ambassador.data?.major.id === 6
                        ? ambassador.data?.major.name
                        : ambassador.data?.major.name + " Engineering"}
                    </h3>
                  </SkeletonDiv>
                </div>
                <div className="flex items-start gap-2 font-bold">
                  <SkeletonDiv
                    loading={ambassador.isLoading}
                    skeletonClassName="h-12 w-20"
                  >
                    <div className="text-5xl">
                      {ambassador.data?.ratings.length === 0
                        ? "--"
                        : ambassadorCals?.overallAverage}
                    </div>
                  </SkeletonDiv>
                  <div className="text-lg text-gray-400">/ 5</div>
                </div>
                <div className="text-sm">
                  Overall rating based on{" "}
                  <span className="font-bold">
                    {ambassador.data?.ratings.length} ratings
                  </span>
                </div>
              </div>
              <div className="flex w-full flex-col gap-4">
                <div className="h-[1px] w-full bg-gray-300 sm:hidden lg:block"></div>
                <div className="flex w-full items-center justify-center gap-4">
                  <SkeletonDiv
                    loading={ambassador.isLoading}
                    skeletonClassName="h-12 w-24"
                  >
                    <div className="flex flex-col items-center">
                      <div className="text-2xl font-bold">
                        {ambassador.data?.ratings.length === 0
                          ? "--"
                          : ambassadorCals?.recommendPercentage + "%"}
                      </div>
                      <div className="text-sm text-gray-700">
                        Would recommend
                      </div>
                    </div>
                  </SkeletonDiv>
                  <div className="h-full min-h-[48px] w-[1px] bg-gray-300"></div>
                  <SkeletonDiv
                    loading={ambassador.isLoading}
                    skeletonClassName="h-12 w-24"
                  >
                    <div className="flex flex-col items-center">
                      <div className="text-2xl font-bold">
                        {ambassador.data?.ratings.length === 0
                          ? "--"
                          : ambassadorCals?.knowledgeAverage}
                      </div>
                      <div className="text-sm text-gray-700">
                        Level of knowledge
                      </div>
                    </div>
                  </SkeletonDiv>
                </div>
                <Link
                  href={`/add/${ambassador.data?.id}`}
                  className="rounded-md bg-auburnOrange-800 px-4 py-2 text-center text-white hover:bg-auburnOrange-900"
                >
                  Rate {ambassador.data?.name}
                </Link>
                <RatingBars
                  ratings={
                    ambassadorCals?.ratingsDistribution ?? [0, 0, 0, 0, 0]
                  }
                />
              </div>
            </div>
            <div className="w-full">
              <div className="flex items-center justify-between gap-4 border-b border-gray-200 pb-4 sm:gap-0">
                <h6 className="text-lg font-bold">Ratings</h6>
                <div className="flex items-center">
                  <div className="relative">
                    <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4">
                      <Image
                        src="/svgs/Magnifier.svg"
                        width={16}
                        height={16}
                        alt="Search icon"
                      />
                    </div>
                    <input
                      type="text"
                      id="RatingsSearchBar"
                      className="border-1 block w-full rounded-l-md border-gray-300 py-2 pl-10 text-sm text-auburnBlue-900 transition-all duration-200 focus:border-auburnOrange-900 focus:ring-auburnOrange-900"
                      value={ratingSearchValue}
                      onChange={(e) => setRatingSearchValue(e.target.value)}
                      placeholder="Search ratings"
                    />
                  </div>
                  <Menu as="div" className="relative inline-block text-left">
                    <div>
                      <Menu.Button className="hidden w-full justify-center rounded-r-md border-y border-r border-gray-300 px-4 py-2 text-sm font-medium text-auburnBlue-900 hover:bg-gray-100 focus-visible:ring-2 focus-visible:ring-white/75 sm:inline-flex">
                        Sort
                        <ChevronDownIcon
                          className="-mr-1 ml-2 h-5 w-5 text-gray-300 hover:text-gray-400"
                          aria-hidden="true"
                        />
                      </Menu.Button>
                      <Menu.Button className="inline-flex w-full justify-center rounded-r-md border-y border-r border-gray-300 px-4 py-2 text-sm font-medium text-auburnBlue-900 hover:bg-gray-100 focus-visible:ring-2 focus-visible:ring-white/75 sm:hidden">
                        <BarsArrowDownIcon
                          className="h-5 w-5 text-gray-500 hover:text-gray-400"
                          aria-hidden="true"
                        />
                      </Menu.Button>
                    </div>
                    <Transition
                      as={Fragment}
                      enter="transition ease-out duration-100"
                      enterFrom="transform opacity-0 scale-95"
                      enterTo="transform opacity-100 scale-100"
                      leave="transition ease-in duration-75"
                      leaveFrom="transform opacity-100 scale-100"
                      leaveTo="transform opacity-0 scale-95"
                    >
                      <Menu.Items className="absolute right-0 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none">
                        <div className="px-1 py-1 ">
                          <Menu.Item>
                            {({ active }) => (
                              <button
                                className={`${
                                  active
                                    ? "bg-auburnBlue-900 text-white"
                                    : "text-auburnBlue-900"
                                } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                              >
                                Newest
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active }) => (
                              <button
                                className={`${
                                  active
                                    ? "bg-auburnBlue-900 text-white"
                                    : "text-auburnBlue-900"
                                } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                              >
                                Oldest
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                        <div className="px-1 py-1">
                          <Menu.Item>
                            {({ active }) => (
                              <button
                                className={`${
                                  active
                                    ? "bg-auburnBlue-900 text-white"
                                    : "text-auburnBlue-900"
                                } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                              >
                                Rating: High to Low
                              </button>
                            )}
                          </Menu.Item>
                          <Menu.Item>
                            {({ active }) => (
                              <button
                                className={`${
                                  active
                                    ? "bg-auburnBlue-900 text-white"
                                    : "text-auburnBlue-900"
                                } group flex w-full items-center rounded-md px-2 py-2 text-sm`}
                              >
                                Rating: Low to High
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                      </Menu.Items>
                    </Transition>
                  </Menu>
                </div>
              </div>

              <div className="flex flex-col gap-6 py-4">
                {ambassador.data?.ratings.length === 0 && (
                  <div className="relative -z-10 flex h-[300px] w-full flex-col-reverse items-center">
                    <Image
                      src="/svgs/Plan.svg"
                      objectFit="fill"
                      layout="fill"
                      alt="No ratings illustration"
                    />
                    <div className="text-lg font-bold text-auburnBlue-900">
                      No ratings yet. Be the first to give one!
                    </div>
                  </div>
                )}
                {filteredRatings?.map((review) => (
                  <div
                    key={review.id}
                    className="flex flex-col gap-2 rounded-md bg-gray-50 p-4 text-auburnBlue-900 shadow shadow-auburnBlue-50 sm:gap-4"
                  >
                    <div className="flex flex-col justify-between gap-2 sm:flex-row sm:items-center sm:gap-0">
                      <div className="flex flex-col gap-1">
                        <div className="text-lg font-bold">
                          {review.MajorRatings.map(
                            (majorRating) => majorRating.major.name,
                          ).join(", ")}
                        </div>
                        <div className="text-sm">
                          {review.createdAt.toLocaleDateString("en-us", {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                          })}
                        </div>
                      </div>
                      <div className="h-[1px] w-full bg-gray-300 sm:hidden"></div>
                      <div className="flex items-center gap-4 sm:justify-center">
                        <div className="flex flex-col items-center">
                          <div className="text-sm">Overall</div>
                          <div className="text-lg font-bold">
                            {review.rating.toFixed(1)}
                          </div>
                        </div>
                        <div className="h-full min-h-[24px] w-[1px] bg-auburnOrange-700"></div>
                        <div className="flex flex-col items-center">
                          <div className="text-sm">Knowledge</div>
                          <div className="text-lg font-bold">
                            {review.knowledgeRating.toFixed(1)}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div>{review.review}</div>
                    <div className="flex items-center justify-between gap-4">
                      <div className="flex items-center gap-4 overflow-auto pt-2 sm:p-0">
                        {review.jokes && (
                          <div className="whitespace-nowrap rounded-full bg-auburnBlue-900 px-4 py-1 text-sm font-semibold text-white">
                            Told Jokes
                          </div>
                        )}
                        {review.friendly && (
                          <div className="rounded-full bg-auburnBlue-900 px-4 py-1 text-sm font-semibold text-white">
                            Friendly
                          </div>
                        )}
                        {review.inspirational && (
                          <div className="rounded-full bg-auburnBlue-900 px-4 py-1 text-sm font-semibold text-white">
                            Inspirational
                          </div>
                        )}
                        {review.easyCommunication && (
                          <div className="whitespace-nowrap rounded-full bg-auburnBlue-900 px-4 py-1 text-sm font-semibold text-white">
                            Easy Communication
                          </div>
                        )}
                      </div>
                      <button
                        onMouseEnter={() => setReportButtonHovered(review.id)}
                        onMouseLeave={() => setReportButtonHovered(-1)}
                      >
                        {reportButtonHovered === review.id ? (
                          <FlagIconSolid className="h-6 w-6 text-auburnOrange-900" />
                        ) : (
                          <FlagIcon className="h-6 w-6 text-auburnOrange-900" />
                        )}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </div>
    </>
  );
};
export default Ambassador;
